<<<<<<< HEAD
# 🧪 278. First Bad Version

## ✅ Problem Statement

You are a product manager and currently leading a team to develop a new product. Unfortunately, the latest version of your product fails the quality check.

Since each version is developed based on the previous version, all the versions **after a bad version are also bad**.

You are given an API:

```cpp
bool isBadVersion(int version);
```

You need to implement a function to **find the first bad version**. You want to minimize the number of calls to the API.

---

## 📥 Example

**Input:**  
`n = 5`, bad version = 4  
(You are not given `bad`, it’s hidden)

**Output:**  
`4`

**Explanation:**

- `isBadVersion(3)` → false
- `isBadVersion(5)` → true
- `isBadVersion(4)` → true  
  So, version `4` is the first bad version.

---

## 🔍 Approach: Binary Search

Since all versions **after a bad one are also bad**, we can use **binary search**:

### ✨ Algorithm:

1. Initialize two pointers:
   - `start = 1`
   - `end = n`
2. While `start <= end`:
   - Calculate `mid = start + (end - start) / 2`
   - If `isBadVersion(mid)` is **true**:
     - Store `mid` as a potential answer.
     - Move search to the **left** (`end = mid - 1`)
   - If `isBadVersion(mid)` is **false**:
     - Move search to the **right** (`start = mid + 1`)
3. Return the stored `mid` as the **first bad version**

---

## 🧠 Time Complexity

- **O(log n)** – Binary search cuts the search space in half each time.

## 💾 Space Complexity

- **O(1)** – Constant space usage.

---

## 💡 Notes

- You don't define the `isBadVersion` function; it is **provided by the platform** (like LeetCode).
- You only use it to check whether a given version is bad.

---

## ✅ Sample Implementation (C++)

```cpp
// The API isBadVersion is defined for you.
// bool isBadVersion(int version);

class Solution {
public:
    int firstBadVersion(int n) {
        int start = 1;
        int end = n;
        int ans = 0;

        while (start <= end) {
            int mid = start + (end - start) / 2;
            if (isBadVersion(mid)) {
                ans = mid;
                end = mid - 1;
            } else {
                start = mid + 1;
            }
        }

        return ans;
    }
};
```
=======
# 🧪 278. First Bad Version

## ✅ Problem Statement

You are a product manager and currently leading a team to develop a new product. Unfortunately, the latest version of your product fails the quality check.

Since each version is developed based on the previous version, all the versions **after a bad version are also bad**.

You are given an API:

```cpp
bool isBadVersion(int version);
```

You need to implement a function to **find the first bad version**. You want to minimize the number of calls to the API.

---

## 📥 Example

**Input:**  
`n = 5`, bad version = 4  
(You are not given `bad`, it’s hidden)

**Output:**  
`4`

**Explanation:**

- `isBadVersion(3)` → false
- `isBadVersion(5)` → true
- `isBadVersion(4)` → true  
  So, version `4` is the first bad version.

---

## 🔍 Approach: Binary Search

Since all versions **after a bad one are also bad**, we can use **binary search**:

### ✨ Algorithm:

1. Initialize two pointers:
   - `start = 1`
   - `end = n`
2. While `start <= end`:
   - Calculate `mid = start + (end - start) / 2`
   - If `isBadVersion(mid)` is **true**:
     - Store `mid` as a potential answer.
     - Move search to the **left** (`end = mid - 1`)
   - If `isBadVersion(mid)` is **false**:
     - Move search to the **right** (`start = mid + 1`)
3. Return the stored `mid` as the **first bad version**

---

## 🧠 Time Complexity

- **O(log n)** – Binary search cuts the search space in half each time.

## 💾 Space Complexity

- **O(1)** – Constant space usage.

---

## 💡 Notes

- You don't define the `isBadVersion` function; it is **provided by the platform** (like LeetCode).
- You only use it to check whether a given version is bad.

---

## ✅ Sample Implementation (C++)

```cpp
// The API isBadVersion is defined for you.
// bool isBadVersion(int version);

class Solution {
public:
    int firstBadVersion(int n) {
        int start = 1;
        int end = n;
        int ans = 0;

        while (start <= end) {
            int mid = start + (end - start) / 2;
            if (isBadVersion(mid)) {
                ans = mid;
                end = mid - 1;
            } else {
                start = mid + 1;
            }
        }

        return ans;
    }
};
```
>>>>>>> 3ffe28cfedf2733f8d30d5c7eedde94246a74e32
