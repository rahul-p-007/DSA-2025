# üî¢ Selection Sort in C++

## üìö Problem Statement

Implement **Selection Sort** in C++. Given an array of integers, sort it in ascending order using the selection sort algorithm.

---

## üîç How Selection Sort Works

- Repeatedly select the smallest element from the unsorted part of the array.
- Swap it with the first unsorted element.
- Move the boundary of the sorted part one step to the right.

---

## ‚ú® Algorithm

1. Loop from `i = 0` to `n - 2`:
   - Assume the minimum element index is `i`
   - Loop from `j = i + 1` to `n - 1`:
     - If `arr[j] < arr[mini]`, update `mini = j`
   - Swap `arr[i]` with `arr[mini]`

---

## üß† Time & Space Complexity

- **Time Complexity:**

  - Best Case: `O(n¬≤)`
  - Average Case: `O(n¬≤)`
  - Worst Case: `O(n¬≤)`

- **Space Complexity:** `O(1)` (In-place sorting)

---

## ‚úÖ Code Implementation

```cpp
#include <bits/stdc++.h>
using namespace std;

// Selection sort function (by reference)
void selectionSort(vector<int>& arr) {
    int n = arr.size();
    for (int i = 0; i < n - 1; i++) {
        int mini = i;
        for (int j = i + 1; j < n; j++) {
            if (arr[j] < arr[mini]) {
                mini = j;
            }
        }
        swap(arr[i], arr[mini]);
    }
}

// Print the array
void PrintArray(const vector<int>& arr) {
    for (int i = 0; i < arr.size(); i++) {
        cout << arr[i] << " ";
    }
    cout << endl;
}
```

---

## üß™ Test Case

```cpp
int main() {
    vector<int> arr = {64, 25, 12, 22, 11};

    cout << "Before sorting: ";
    PrintArray(arr);

    selectionSort(arr);

    cout << "After sorting: ";
    PrintArray(arr);

    return 0;
}
```

---

## üßæ Sample Output

```
Before sorting: 64 25 12 22 11
After sorting: 11 12 22 25 64
```

---

## üß™ More Test Cases

Try changing the `arr` in `main()` with the following for more practice:

```cpp
vector<int> arr = {5, 4, 3, 2, 1};    // Reverse order
vector<int> arr = {1, 2, 3, 4, 5};    // Already sorted
vector<int> arr = {10, 10, 10, 10};   // All same elements
vector<int> arr = {3, -1, 4, 0, -5};  // Mixed negative and positive
vector<int> arr = {1};                // Single element
vector<int> arr = {};                 // Empty array
```

---
